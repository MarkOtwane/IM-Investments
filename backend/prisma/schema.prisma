generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email               String    @unique
  password            String
  role                Role      @default(CUSTOMER)
  createdAt           DateTime  @default(now())
  resetToken          String?
  resetTokenExpiresAt DateTime?
  id                  Int       @id @default(autoincrement())
  cart                Cart?
  orders              Order[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  name        String
  description String
  price       Float
  imageUrl    String
  createdAt   DateTime   @default(now())
  stock       Int
  id          Int        @id @default(autoincrement())
  updatedAt   DateTime   @updatedAt
  categoryId  Int
  cartItems   CartItem[]
  category    Category   @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
}

model Cart {
  id     Int        @id @default(autoincrement())
  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  quantity  Int
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id          Int           @id @default(autoincrement())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  totalAmount Float
  status      OrderStatus   @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  items       OrderItem[]
  payment     Payment?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Payment {
  id                Int           @id @default(autoincrement())
  orderId           Int           @unique
  order             Order         @relation(fields: [orderId], references: [id])
  amount            Float
  phoneNumber       String
  transactionId     String?       @unique
  checkoutRequestId String?       @unique
  status            PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  mpesaResponse     Json?
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
